
db.categories.insertOne({
"id":2,
 "name":"SmartPhones",
  "Description":"Smart Mobiles"});
  //insert multiple documents
  db.categories.insertMany([
      {
          id:4,
          name:"fruits",
          description:"lovely fruit"

      },
      {
          id:5,name:"drinks",
          description:"Coldrinks and beverages"
      }
  ]);
  // Get list of collections
  db.getCollectionNames();

  db.products.insertOne({
      id:101,
      name:"Apple",
      quantity:105,
      price:10,
      vendors:[
          {id:23,name:"ABC Exports",location:"Mumbai",Mobile:"9000000"},  
          {id:24,name:"ABC Exports",location:"Mumbai",Mobile:"9000000"}     
      ],
      "categories":[
          {id:4,name:"fruits"},
          {id:5,name:"vegetables"},
          {id:6,name:"Pershable goods"}
      ]
  })
  // Query Data
  db.categories.find();
  //query with conditions
  db.categories.find({id:2})
  //
  db.categories.find({},{id:0});

  db.categories.find({},{name:1,id:0,_id:0});

  db.categories.find({name:"Mobiles"},{name:1,"Description":1,_id:0 })

//delete products collection
db.products.deleteMany({id:101}) 

db.products.insertMany([
    {	
	"id" : 1,
	"name" : "Apple",
	"price" : 200,
	"quantity" : 10,
	"availability" : "Available",
	"category" : {
		"cid" : "C1",
		"cname" : "Fruits",
		"description" : "Fruits items"
	}
},
{	
	"id" : 2,
	"name" : "Orange",
	"price" : 100,
	"quantity" : 15,
	"availability" : "Available",
	"category" : {
		"cid" : "C1",
		"cname" : "Fruits",
		"description" : "Fruits items"
	}
},

{
	"id" : 3,
	"name" : "Watermelon",
	"price" : 30,
	"quantity" : 5,
	"availability" : "Out of Stock",
	"category" : {
		"cid" : "C1",
		"cname" : "Fruits",
		"description" : "Fruits items"
	}
},

{	
	"id" : 4,
	"name" : "Tomato",
	"price" : 20,
	"quantity" : 100,
	"availability" : "Available",
	"category" : {
		"cid" : "C2",
		"cname" : "Vegetables",
		"description" : "Vegetable items"
	}
},

{
	"id" : 5,
	"name" : "Brinjal",
	"price" : 25,
	"quantity" : 10,
	"availability" : "Out of Stock",
	"category" : {
		"cid" : "C2",
		"cname" : "Vegetables",
		"description" : "Vegetable items"
	}
},

{	
	"id" : 6,
	"name" : "Egg",
	"price" : 5,
	"quantity" : 20,
	"availability" : "Available",
	"category" : {
		"cid" : "C3",
		"cname" : "Food",
		"description" : "Food items"
	}
},

{
	"id" : 7,
	"name" : "Wheat",
	"price" : 45,
	"quantity" : 25,
	"availability" : "Out of Stock",
	"category" : {
		"cid" : "C3",
		"cname" : "Food",
		"description" : "Food items"
	}
},

{
	"id" : 8,
	"name" : "HP Envy",
	"price" : 75000,
	"quantity" : 5,
	"availability" : "Out of Stock",
	"category" : {
		"cid" : "C4",
		"cname" : "Gadgets",
		"description" : "Laptops and mobiles"
	}
},

{
	"id" : 9,
	"name" : "Honor 9 Lite",
	"price" : 19999,
	"quantity" : 5,
	"availability" : "Available",
	"category" : {
		"cid" : "C4",
		"cname" : "Gadgets",
		"description" : "Laptops and mobiles"
	}
},

{
	"id" : 10,
	"name" : "Iphone X",
	"price" : 86000,
	"quantity" : 2,
	"availability" : "Out of Stock",
	"category" : {
		"cid" : "C4",
		"cname" : "Gadgets",
		"description" : "Laptops and mobiles"
	}
}
])
// find and returns first matching document
db.products.findOne({"category.cname":"Fruits"})

//sort documents
db.products.find({},{_id:0,name:1,availability:1,price:1})
.sort({price:-1})
//Query fixed number of documents
db.products.count();
db.products.find().limit(4);
// skip 4 and show next 4
db.products.find().skip(4).limit(4);

// update documents
//db.collection.update(filter,updateData,options)

db.products.find().sort({availability:1});
//$set is used to update existing attribute value or insert a new attribute
//multi:true option is used to update multiple records
db.products.update(
{availability:'Out of Stock'},
{
$set:{availability:'Available',quantity:10}
},
{
    multi:true
}
);

db.products.update(
{quantity:10},
{
$set:{reorderLevel:5,expiry:'10:10:2010'}
},
{
    multi:true
}
);
//Remove expiry atribute and insert mfgDate attribute for all docs
db.products.update(
{},
{
    $unset:{expiry:0},
    $set:{mfgDate:'2019-09-01'}
},
{
    multi:true
}
);
//if records not matches then insert it it is called upsert
db.products.update(
{name:"Pepsi"},
{
    $set:{id:12,quantity:20,price:22}
},
{
    upsert:true
}
);

//Relational operators 
//$lte,$lt,$gt,$gte,$ne,$eq
//Conditional Operators
//$and,$or
db.products.find({
    $and:[{"category.cname":"Fruits"},
    {price:{$gte:90}}]
});

db.products.find({
    $or:[{"category.cname":"Fruits"},
    {"category.cname":"Vegetables"}
    ]
})

db.products.find({
    $and:[
        {price:{$lt:100}},
        {$or:[{"category.cname":"Fruits"},{"category.cname":"Vagetables"}]}
    ]
})
//Array related operations
// marks must contain (40,50,71)
db.students.find(
{
    marks:{$all:[40,50,71]}
})

db.students.find(
{
    marks:{$elemMatch:{$gte:70, $lte:90}}
});
// marks has 4 elements
db.students.find({marks:{$size:4}});
// only 2 items of marks using projection

db.students.find(
{},
{
    marks:{$slice:[2,2]} // start index,length
}
);
// inserted 50 to marks where name is arti
//push to array even element exists
db.students.update(
{name:"Arti"},
{$push:{marks:50}}
);
// Iterate through an array of elements and push to array
// when use with $push
// To avoid duplication we can use $addToSet
db.students.update(
{name:'Sekhar'},
{$push:{ marks: {$each:[25,35,45]}}}
);

//Mongodb Aggregation
//Agreegation pipeline

db.students.aggregate([
    {$match:{location:"Chennai"}},
    {$unwind: "$marks"},
    // unwind is similar to cross join
   // {$match:{marks:{$gte:70}}}
   // group based on name with total marks
   {
       $group:{_id:"$name",totalMark:{$sum:"$marks"}}
    
   },
   // use actual name instead of _id and show totalmark and hide _id
   {$project:{name:"$_id",totalMark:1,_id:0}}
])
